// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace message {
class AddIconReq;
struct AddIconReqDefaultTypeInternal;
extern AddIconReqDefaultTypeInternal _AddIconReq_default_instance_;
class AddIconRsp;
struct AddIconRspDefaultTypeInternal;
extern AddIconRspDefaultTypeInternal _AddIconRsp_default_instance_;
class GetIconReq;
struct GetIconReqDefaultTypeInternal;
extern GetIconReqDefaultTypeInternal _GetIconReq_default_instance_;
class GetIconRsp;
struct GetIconRspDefaultTypeInternal;
extern GetIconRspDefaultTypeInternal _GetIconRsp_default_instance_;
}  // namespace message
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace message {

// ===================================================================


// -------------------------------------------------------------------

class GetIconRsp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.GetIconRsp) */ {
 public:
  inline GetIconRsp() : GetIconRsp(nullptr) {}
  ~GetIconRsp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetIconRsp(::google::protobuf::internal::ConstantInitialized);

  inline GetIconRsp(const GetIconRsp& from)
      : GetIconRsp(nullptr, from) {}
  GetIconRsp(GetIconRsp&& from) noexcept
    : GetIconRsp() {
    *this = ::std::move(from);
  }

  inline GetIconRsp& operator=(const GetIconRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIconRsp& operator=(GetIconRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIconRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIconRsp* internal_default_instance() {
    return reinterpret_cast<const GetIconRsp*>(
               &_GetIconRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetIconRsp& a, GetIconRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIconRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIconRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIconRsp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIconRsp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetIconRsp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetIconRsp& from) {
    GetIconRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetIconRsp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "message.GetIconRsp";
  }
  protected:
  explicit GetIconRsp(::google::protobuf::Arena* arena);
  GetIconRsp(::google::protobuf::Arena* arena, const GetIconRsp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconPixmapFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // bytes icon_pixmap = 2;
  void clear_icon_pixmap() ;
  const std::string& icon_pixmap() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon_pixmap(Arg_&& arg, Args_... args);
  std::string* mutable_icon_pixmap();
  PROTOBUF_NODISCARD std::string* release_icon_pixmap();
  void set_allocated_icon_pixmap(std::string* value);

  private:
  const std::string& _internal_icon_pixmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_pixmap(
      const std::string& value);
  std::string* _internal_mutable_icon_pixmap();

  public:
  // int32 error = 1;
  void clear_error() ;
  ::int32_t error() const;
  void set_error(::int32_t value);

  private:
  ::int32_t _internal_error() const;
  void _internal_set_error(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:message.GetIconRsp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr icon_pixmap_;
    ::int32_t error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class GetIconReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.GetIconReq) */ {
 public:
  inline GetIconReq() : GetIconReq(nullptr) {}
  ~GetIconReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetIconReq(::google::protobuf::internal::ConstantInitialized);

  inline GetIconReq(const GetIconReq& from)
      : GetIconReq(nullptr, from) {}
  GetIconReq(GetIconReq&& from) noexcept
    : GetIconReq() {
    *this = ::std::move(from);
  }

  inline GetIconReq& operator=(const GetIconReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIconReq& operator=(GetIconReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIconReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIconReq* internal_default_instance() {
    return reinterpret_cast<const GetIconReq*>(
               &_GetIconReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetIconReq& a, GetIconReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIconReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIconReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIconReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIconReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetIconReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetIconReq& from) {
    GetIconReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetIconReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "message.GetIconReq";
  }
  protected:
  explicit GetIconReq(::google::protobuf::Arena* arena);
  GetIconReq(::google::protobuf::Arena* arena, const GetIconReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:message.GetIconReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr url_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class AddIconRsp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.AddIconRsp) */ {
 public:
  inline AddIconRsp() : AddIconRsp(nullptr) {}
  ~AddIconRsp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddIconRsp(::google::protobuf::internal::ConstantInitialized);

  inline AddIconRsp(const AddIconRsp& from)
      : AddIconRsp(nullptr, from) {}
  AddIconRsp(AddIconRsp&& from) noexcept
    : AddIconRsp() {
    *this = ::std::move(from);
  }

  inline AddIconRsp& operator=(const AddIconRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddIconRsp& operator=(AddIconRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddIconRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddIconRsp* internal_default_instance() {
    return reinterpret_cast<const AddIconRsp*>(
               &_AddIconRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddIconRsp& a, AddIconRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddIconRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddIconRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddIconRsp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddIconRsp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddIconRsp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddIconRsp& from) {
    AddIconRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddIconRsp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "message.AddIconRsp";
  }
  protected:
  explicit AddIconRsp(::google::protobuf::Arena* arena);
  AddIconRsp(::google::protobuf::Arena* arena, const AddIconRsp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // int32 error = 1;
  void clear_error() ;
  ::int32_t error() const;
  void set_error(::int32_t value);

  private:
  ::int32_t _internal_error() const;
  void _internal_set_error(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:message.AddIconRsp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      30, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::int32_t error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class AddIconReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.AddIconReq) */ {
 public:
  inline AddIconReq() : AddIconReq(nullptr) {}
  ~AddIconReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddIconReq(::google::protobuf::internal::ConstantInitialized);

  inline AddIconReq(const AddIconReq& from)
      : AddIconReq(nullptr, from) {}
  AddIconReq(AddIconReq&& from) noexcept
    : AddIconReq() {
    *this = ::std::move(from);
  }

  inline AddIconReq& operator=(const AddIconReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddIconReq& operator=(AddIconReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddIconReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddIconReq* internal_default_instance() {
    return reinterpret_cast<const AddIconReq*>(
               &_AddIconReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddIconReq& a, AddIconReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddIconReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddIconReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddIconReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddIconReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddIconReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddIconReq& from) {
    AddIconReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddIconReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "message.AddIconReq";
  }
  protected:
  explicit AddIconReq(::google::protobuf::Arena* arena);
  AddIconReq(::google::protobuf::Arena* arena, const AddIconReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // bytes contents = 2;
  void clear_contents() ;
  const std::string& contents() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contents(Arg_&& arg, Args_... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* value);

  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(
      const std::string& value);
  std::string* _internal_mutable_contents();

  public:
  // int32 uid = 1;
  void clear_uid() ;
  ::int32_t uid() const;
  void set_uid(::int32_t value);

  private:
  ::int32_t _internal_uid() const;
  void _internal_set_uid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:message.AddIconReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr contents_;
    ::int32_t uid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AddIconReq

// int32 uid = 1;
inline void AddIconReq::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_ = 0;
}
inline ::int32_t AddIconReq::uid() const {
  // @@protoc_insertion_point(field_get:message.AddIconReq.uid)
  return _internal_uid();
}
inline void AddIconReq::set_uid(::int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.AddIconReq.uid)
}
inline ::int32_t AddIconReq::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void AddIconReq::_internal_set_uid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_ = value;
}

// bytes contents = 2;
inline void AddIconReq::clear_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contents_.ClearToEmpty();
}
inline const std::string& AddIconReq::contents() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.AddIconReq.contents)
  return _internal_contents();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddIconReq::set_contents(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contents_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.AddIconReq.contents)
}
inline std::string* AddIconReq::mutable_contents() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:message.AddIconReq.contents)
  return _s;
}
inline const std::string& AddIconReq::_internal_contents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contents_.Get();
}
inline void AddIconReq::_internal_set_contents(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contents_.Set(value, GetArena());
}
inline std::string* AddIconReq::_internal_mutable_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.contents_.Mutable( GetArena());
}
inline std::string* AddIconReq::release_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:message.AddIconReq.contents)
  return _impl_.contents_.Release();
}
inline void AddIconReq::set_allocated_contents(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contents_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contents_.IsDefault()) {
          _impl_.contents_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.AddIconReq.contents)
}

// -------------------------------------------------------------------

// AddIconRsp

// int32 error = 1;
inline void AddIconRsp::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_ = 0;
}
inline ::int32_t AddIconRsp::error() const {
  // @@protoc_insertion_point(field_get:message.AddIconRsp.error)
  return _internal_error();
}
inline void AddIconRsp::set_error(::int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.AddIconRsp.error)
}
inline ::int32_t AddIconRsp::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_;
}
inline void AddIconRsp::_internal_set_error(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_ = value;
}

// string url = 2;
inline void AddIconRsp::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& AddIconRsp::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.AddIconRsp.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddIconRsp::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.AddIconRsp.url)
}
inline std::string* AddIconRsp::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:message.AddIconRsp.url)
  return _s;
}
inline const std::string& AddIconRsp::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void AddIconRsp::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* AddIconRsp::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* AddIconRsp::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:message.AddIconRsp.url)
  return _impl_.url_.Release();
}
inline void AddIconRsp::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.AddIconRsp.url)
}

// -------------------------------------------------------------------

// GetIconReq

// string url = 1;
inline void GetIconReq::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& GetIconReq::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.GetIconReq.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetIconReq::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.GetIconReq.url)
}
inline std::string* GetIconReq::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:message.GetIconReq.url)
  return _s;
}
inline const std::string& GetIconReq::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void GetIconReq::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* GetIconReq::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* GetIconReq::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:message.GetIconReq.url)
  return _impl_.url_.Release();
}
inline void GetIconReq::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetIconReq.url)
}

// -------------------------------------------------------------------

// GetIconRsp

// int32 error = 1;
inline void GetIconRsp::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_ = 0;
}
inline ::int32_t GetIconRsp::error() const {
  // @@protoc_insertion_point(field_get:message.GetIconRsp.error)
  return _internal_error();
}
inline void GetIconRsp::set_error(::int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetIconRsp.error)
}
inline ::int32_t GetIconRsp::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_;
}
inline void GetIconRsp::_internal_set_error(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_ = value;
}

// bytes icon_pixmap = 2;
inline void GetIconRsp::clear_icon_pixmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_pixmap_.ClearToEmpty();
}
inline const std::string& GetIconRsp::icon_pixmap() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.GetIconRsp.icon_pixmap)
  return _internal_icon_pixmap();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetIconRsp::set_icon_pixmap(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_pixmap_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.GetIconRsp.icon_pixmap)
}
inline std::string* GetIconRsp::mutable_icon_pixmap() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon_pixmap();
  // @@protoc_insertion_point(field_mutable:message.GetIconRsp.icon_pixmap)
  return _s;
}
inline const std::string& GetIconRsp::_internal_icon_pixmap() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_pixmap_.Get();
}
inline void GetIconRsp::_internal_set_icon_pixmap(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_pixmap_.Set(value, GetArena());
}
inline std::string* GetIconRsp::_internal_mutable_icon_pixmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_pixmap_.Mutable( GetArena());
}
inline std::string* GetIconRsp::release_icon_pixmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:message.GetIconRsp.icon_pixmap)
  return _impl_.icon_pixmap_.Release();
}
inline void GetIconRsp::set_allocated_icon_pixmap(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_pixmap_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_pixmap_.IsDefault()) {
          _impl_.icon_pixmap_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetIconRsp.icon_pixmap)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace message


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
