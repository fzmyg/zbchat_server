// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace message {

static const char* ResourceService_method_names[] = {
  "/message.ResourceService/AddIcon",
  "/message.ResourceService/GetIcon",
};

std::unique_ptr< ResourceService::Stub> ResourceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ResourceService::Stub> stub(new ResourceService::Stub(channel, options));
  return stub;
}

ResourceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddIcon_(ResourceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIcon_(ResourceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ResourceService::Stub::AddIcon(::grpc::ClientContext* context, const ::message::AddIconReq& request, ::message::AddIconRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::AddIconReq, ::message::AddIconRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddIcon_, context, request, response);
}

void ResourceService::Stub::async::AddIcon(::grpc::ClientContext* context, const ::message::AddIconReq* request, ::message::AddIconRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::AddIconReq, ::message::AddIconRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddIcon_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::AddIcon(::grpc::ClientContext* context, const ::message::AddIconReq* request, ::message::AddIconRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddIcon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::AddIconRsp>* ResourceService::Stub::PrepareAsyncAddIconRaw(::grpc::ClientContext* context, const ::message::AddIconReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::AddIconRsp, ::message::AddIconReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddIcon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::AddIconRsp>* ResourceService::Stub::AsyncAddIconRaw(::grpc::ClientContext* context, const ::message::AddIconReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddIconRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetIcon(::grpc::ClientContext* context, const ::message::GetIconReq& request, ::message::GetIconRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GetIconReq, ::message::GetIconRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIcon_, context, request, response);
}

void ResourceService::Stub::async::GetIcon(::grpc::ClientContext* context, const ::message::GetIconReq* request, ::message::GetIconRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GetIconReq, ::message::GetIconRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIcon_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetIcon(::grpc::ClientContext* context, const ::message::GetIconReq* request, ::message::GetIconRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIcon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetIconRsp>* ResourceService::Stub::PrepareAsyncGetIconRaw(::grpc::ClientContext* context, const ::message::GetIconReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetIconRsp, ::message::GetIconReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIcon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetIconRsp>* ResourceService::Stub::AsyncGetIconRaw(::grpc::ClientContext* context, const ::message::GetIconReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIconRaw(context, request, cq);
  result->StartCall();
  return result;
}

ResourceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::AddIconReq, ::message::AddIconRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::AddIconReq* req,
             ::message::AddIconRsp* resp) {
               return service->AddIcon(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::GetIconReq, ::message::GetIconRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GetIconReq* req,
             ::message::GetIconRsp* resp) {
               return service->GetIcon(ctx, req, resp);
             }, this)));
}

ResourceService::Service::~Service() {
}

::grpc::Status ResourceService::Service::AddIcon(::grpc::ServerContext* context, const ::message::AddIconReq* request, ::message::AddIconRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetIcon(::grpc::ServerContext* context, const ::message::GetIconReq* request, ::message::GetIconRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

